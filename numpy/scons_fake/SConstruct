# vim:syntax=python
from os.path import join as pjoin
import os.path

opts = Options()
opts.Add('pkg_name', 'name of the package (including parent package if any)', '')
opts.Add('src_dir', 'src dir relative to top called', '.')
opts.Add('build_prefix', 'build prefix (NOT including the package name)', pjoin('build', 'scons'))
opts.Add('distutils_libdir', 'build dir for libraries of distutils (NOT including the package name)', pjoin('build', 'lib'))

env = Environment(options = opts)
env.AppendUnique(build_dir = pjoin(env['build_prefix'], env['pkg_name'].replace('.', os.path.sep)))
env.AppendUnique(distutils_installdir = pjoin(env['distutils_libdir'], env['pkg_name'].replace('.', os.path.sep)))

def NumpySharedLibrary(env, target, source, *args, **kw):
    source = [pjoin(env['build_dir'], i) for i in source]
    # XXX: why target is a list ? It is always true ?
    lib = env.SharedLibrary("$build_dir/%s" % target[0], source, *args, **kw)

    inst_lib = env.Install("$distutils_installdir", lib)
    return lib, inst_lib

env['BUILDERS']['NumpySharedLibrary'] = NumpySharedLibrary
if len(env['src_dir']) > 0:
    BuildDir(env['build_dir'], env['src_dir'])
else:
    BuildDir(env['build_dir'], '.')

source = ['foo.c']
env.NumpySharedLibrary('foo', source)
