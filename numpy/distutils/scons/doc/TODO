Before second alpha (in order of priority):
    - show_config implementation : show libs, libpath and cpppath for each
      configuration (~ 2-3 hours)
    - BLAS, CBLAS and LAPACK meta checkers: overridable, support at least
      ATLAS, Accelerate, and MKL (~ 2-3 hours)
    - Basic warn, debug and optim flags : at least gcc+linux, mingw, VS, gcc+mac
      os x, and posix ? (~ 2 hours).

Before first beta:
    - f2py and scipy interoperability: N hours

Design questions:
    - improve BrokenMathlib and Mathlib in core, and make them available to
      everyone
    - How to build meta-checkers from simple checkers (for example, BLAS with
      MKL, ATLAS, Sunperf, etc...) ?
    - How to gather informations from checkers for config info ?
    - How to provide a usable framework for checks (+ doc)
    - overriding compilation flags: env variables, site.cfg ? (autotools
      convention ?)

Code cleaning:
    - improve Fortran runtime detection for upstream integration
    - improve Fortran mangling and dummy main detection for upstream
      integration

Builder:
    - Get a PythonExtension builder independant of distutils for upstream
      integration
    - Get a CtypesExtension builder independant of distutils for upstream
      integration
    - Generic Api builders (with dep tracking)
    - Generic FromTemplate builder (with dep tracking)

Implementation details:
    - Refactor code for API generation (numpy/core/code_generators) -> Mostly done
    - Refactor code organization in numpy/distutils/scons

Tests:
    - What can be tested ?

Documentation:
    - scons / distutils integration, global design (BuildDir, directories, etc...)
    - use cases: package developers (examples, etc...), numpy developers,
      building numpy with scons, etc...
